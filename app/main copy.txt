#this code only serves as an example of how to use the API with 
#    1.- A 'list' DB (all commented out) and 
#    2.- Using a Postgre Data Base, Raw SQL and psycopg2
import stat
from typing import Optional
from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
import psycopg2
from psycopg2.extras import RealDictCursor
from pydantic import BaseModel
import time


from random import randrange

app = FastAPI()

class Post(BaseModel):
    title: str
    content: str
    published: bool = True # If you send the post request without published it will be True by default
    #rating: Optional[int] = None # this is an optional field that should be Integer and by default is None

while True:
    try:
        conn = psycopg2.connect(host='localhost', database='fastapi', user='postgres', password='admin', cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        print('Databse connection was succesfull')
        break
    except Exception as error:
        print('Connection to the Database failed')
        print('Error: ', error)
        time.sleep(2)


my_posts = [{'title':'title post 1', 'content':'content post 1', 'id':1},{'title':'title post 2', 'content':'content post 2', 'id':2}]


def find_post(id):
    for p in my_posts:
        if p['id'] == id:
            return p

    
def find_index_post(id):
    for i, p in enumerate(my_posts):
        if p['id'] == id:
            return i


@app.get('/')
def read_root():
    return {'Hello"': 'World!!!'}


@app.get('/posts')
def get_posts():
    cursor.execute('''SELECT * FROM posts;''')
    posts = cursor.fetchall()
    #return {'data': my_posts}
    return {'data': posts}
my_posts


@app.post('/posts', status_code=status.HTTP_201_CREATED)
def create_post(post: Post):
    # print(post)
    # print(post.model_dump()) # this converts to a python dictionary, before they used .dict( but it was depreciated)
    # print(post.title)
    # print(post.content)
    # print(post.published)
    # print(post.rating)
    # post_dict = post.model_dump()
    # post_dict['id'] = randrange(0,1000000)
    # my_posts.append(post_dict)

    cursor.execute('''INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *''', (post.title, post.content, post.published))
    # Note:  never use a f'INSERT INTO ... {post.title}' inside a query insted use the %s, becasue this could be SQL injection
    new_post = cursor.fetchone()
    conn.commit()
    return {'data':new_post}


@app.get('/posts/{id}')
def get_post(id: int, response: Response):
    #post = find_post(id)
    #This is why it needs the extra comma
    #id_tuple = (id,)
    #cursor.execute('''SELECT * FROM posts WHERE id=%s''', id_tuple)
    cursor.execute('''SELECT * FROM posts WHERE id=%s''', (str(id),))
    post = cursor.fetchone()
    print(post)
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, 
                            detail=f'post with id: {id} was not found')          
    return {'post detail': post}


@app.delete('/posts/{id}', status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int):
    #index = find_index_post(id)
    cursor.execute('''DELETE FROM posts WHERE id=%s RETURNING *;''', (str(id),))
    deleted_post = cursor.fetchone()
    conn.commit()
    if deleted_post is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, 
                            detail=f'post with id: {id} was not found')
    #my_posts.pop(index)
    return Response(status_code=status.HTTP_204_NO_CONTENT)


@app.put('/posts/{id}')
def update_post(id: int, post: Post):
    #index = find_index_post(id)
    cursor.execute('''UPDATE posts SET title=%s, content=%s, published=%s WHERE id=%s RETURNING *''', 
                   (post.title, post.content, post.published, str(id)))
    updated_post = cursor.fetchone()
    conn.commit()

    if updated_post is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, 
                            detail=f'post with id: {id} was not found')
    #post_dict = post.model_dump()
    #post_dict['id'] = id
    #my_posts[index] = post_dict
    return {'data': updated_post}